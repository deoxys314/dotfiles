" .vimrc
" Maintainer: Cameron Rossington

" {{{ Plugins

" vim has worked around all the POSIX oddities that fish doesn't have
" so when it tries to use fish things get very confused.  Fortunately, this
" was fixed in 7.4, patch 276
if v:version < 705 && &shell =~# 'fish$'
    set shell=sh
endif

call plug#begin()
call plug#end()

" must be set before mappings below
let mapleader = ' '
let maplocalleader = mapleader
" }}}

" 

" {{{ Whitespace Options

set shiftwidth=4
set softtabstop=4
set tabstop=4

" show wrapped lines
let &showbreak = '--> '

" keep indent same when wrapping
set breakindent

set list
set listchars=eol:$,tab:>\ ,nbsp:#,trail:_,extends:>,precedes:<,nbsp:#
" }}}

" {{{ Display Options

set number     " line numbers
syntax on      " syntax highlighting

set showcmd    " show incomplete commands

set nowrap     " don't wrap lines
set linebreak  " don't break in the middle of a word

set wildmenu   " better tab-completion

" to check line lengths
set colorcolumn=+0

" A single cursor is enough
set nocursorline nocursorcolumn


" colorscheme
silent! set termguicolors
" }}}

" {{{ Navigation options

" split navigations
set splitright
set splitbelow

" navigate splits with <Ctrl-hjkl>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" j and k by lines on screen, as with modern editors
nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k

" scrolling
set scrolloff=4
set sidescrolloff=8
set sidescroll=1

" folding options
set foldmethod=marker
set foldlevel=1
set foldopen+=all
set foldclose=all

" wraps h and l like modern editors
set whichwrap+=h,l,<,>,[,]

" let % bounce between angle brackets as well
set matchpairs+=<:>

" Mappings for work
nnoremap <silent> ]b        /^.\{-}[:?]\s*$<CR>$
nnoremap <silent> [b        ?^.\{-}[:?]\s*$<CR>$
nnoremap <silent> <leader>b /^.\{-}[:?]\s*$<CR>$
" }}}

" {{{ Search options
set incsearch  " go to results as you type
set ignorecase " ignore case in search . . .
set smartcase  " unless I type a capital letter

if has('patch-8.0.1206')
	augroup vimrc-insearch-highlight
		autocmd!
		autocmd CmdLineEnter [/\?] call search#toggle_hls(1)
		autocmd CmdLineLeave [/\?] call search#toggle_hls(0)
	augroup END
endif

" automatically make searches "more magic" aka sane
nnoremap / /\v
vnoremap / /\v
nnoremap ? ?\v
vnoremap ? ?\v

if executable('rg')
	set grepprg=rg\ --vimgrep\ $*
elseif executable('grep')
	set grepprg=grep\ -Rn\ --\ $*
else
	" fall back to vimgrep, which is slower but functional
	set grepprg=internal
endif
command! -nargs=+ -bar Grep silent! grep! <args> | cwindow | redraw!
" }}}

" {{{ Editing Options

" virtual edit in visual mode
set virtualedit+=block

" swap file
let s:swap = $HOME . '/vimswap'
if !isdirectory(s:swap)
	call mkdir(s:swap, 'p')
endif
set swapfile
set directory-=.
execute 'set directory^=' . s:swap

" formatting options, mostly dealing with comment characters
set formatoptions-=o " no autoinsert of comment char on o or O
set formatoptions-=r " no autoinsert of comment char on <CR> in insert mode
set formatoptions+=j " remove comment leader when Joining lines
set formatoptions+=1 " if possible, break line before one letter word
set formatoptions+=c " auto-format comments
set formatoptions-=t " but don't auto-format text

" automagically load changes from disk
set autoread

" set a default and good enough omnifunc
set omnifunc=syntaxcomplete#Complete
" }}}

" {{{ Key and Command Mappings

" cd to :head of :path
nnoremap <Leader>cd :cd %:p:h<CR>

" remove trailing whitespace
nnoremap <Leader>w :call whitespace#TrimWhitespace()<CR>

" go to next misspelled word and suggest
nnoremap <Leader>s ]Sz=
nnoremap <Leader>S [Sz=

" I don't like Ex mode
nnoremap Q <nop>

" compliment to ZZ and ZQ
nnoremap ZA :w<CR>

" using mouse
set mouse=a

" color options
command! RandomColorScheme call color#RandomColorScheme()
command! NextColorScheme call color#NextColorScheme()
command! PreviousColorScheme call color#PreviousColorScheme()

" comes in handy
command! -bar -range OK <line1>,<line2>call insert#InsertAtLineEnd('OK')
nnoremap <Leader>o :OK<CR>
vnoremap <Leader>o :OK<CR>

" editing prose
command! -bang Prose call prose#initialize()
" }}}

" {{{ Misc Options

" make backspace work the way it dos in most editors
set backspace=indent,eol,start

" UTF-8
set encoding=utf-8

" store a lot of history
set history=1000

" Unix line endings
set fileformat=unix

" no sound, just flash the screen
set visualbell

" Make spell not take over entire screen
set spellsuggest=15

" no modelines: potential security issue
set modelines=0

" sensible printing defaults
set printoptions+=header:0
set printoptions+=syntax:y
set printoptions+=wrap:y

if &diff
	" Makes diff easier to read
	" https://vi.stackexchange.com/a/626
	highlight! link DiffText MatchParen

	" easier to quit both at once in diff mode
	command! Q qall

	" disable linting
	silent! ALEDisable

	set nonumber signcolumn=no
endif

" some settings that can't be done from a ftplugin (or it would be onerous to
" do so)
augroup virmc
	autocmd!
	autocmd BufNewFile,BufRead *.js,*.css,*.htm,*.html,*.php
	  \ setlocal
	  \   autoindent
	  \   fileformat=unix
	  \   foldmethod=indent
	  \   noexpandtab
	  \   shiftwidth=2
	  \   softtabstop=2
	  \   tabstop=2
	autocmd BufNewFile,BufRead !status* cd %:p:h | setlocal spell
	autocmd InsertLeave *.py,*.pyw
	  \ if pumvisible() == 0 && winnr('$') > 1 | pclose | endif
augroup END
" }}}

" {{{ Add this location to the runtimepath
let &runtimepath .= ',' . expand('<sfile>:p:h')
" }}}
