" .vimrc
" Maintainer: Cameron Rossington

" {{{ Plugins

" vim has worked around all the POSIX oddities that fish doesn't have
" so when it tries to use fish things get very confused.  Fortunately, this
" was fixed in 7.4, patch 276
if v:version < 705 && &shell =~# 'fish$'
    set shell=sh
endif

call plug#begin()

" Treesitter
if has('nvim')
	Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
endif

" Vim:
Plug 'airblade/vim-rooter'
Plug 'andymass/vim-matchup' " improvement on matchit
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-apathy' " set &path
Plug 'tpope/vim-characterize' " hacks ga for better character information
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-eunuch' " helpers for common UNIX-y operations
Plug 'tpope/vim-obsession' " session management
Plug 'tpope/vim-projectionist' " per-project settings
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar' " better netrw

" Colors:
Plug 'chriskempson/base16-vim'
Plug 'cormacrelf/vim-colors-github'

" Prose:
Plug 'freitass/todo.txt-vim'
Plug 'gabrielelana/vim-markdown'
Plug 'junegunn/goyo.vim'

" Programming (general):
Plug 'alvan/vim-closetag'
" you have to set this before the plugin is loaded
let g:polyglot_disabled = ['markdown']
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
let g:ale_completion_enabled = 1
Plug 'w0rp/ale', { 'tag': '*' }

" Git:
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'rhysd/git-messenger.vim'

" Python:
Plug 'tmhedberg/SimpylFold'

" Rust:
Plug 'rust-lang/rust.vim'

call plug#end()

" must be set before mappings below
let mapleader = ' '
let maplocalleader = mapleader
" }}}

" {{{ Plugin Settings

" ALE
let g:ale_fixers = get(g:, 'ale_fixers', {})
let g:ale_fixers['*'] = ['remove_trailing_lines', 'trim_whitespace']
let g:ale_fixers.python = ['isort', 'add_blank_lines_for_python_control_statements',
  \ 'black', 'remove_trailing_lines']
let g:ale_fixers.lua = ['remove_trailing_lines', 'trim_whitespace', 'lua-format']
let g:ale_fixers.cpp = ['remove_trailing_lines', 'trim_whitespace', 'clang-format']
let g:ale_fixers.fish = ['fish_indent']
let g:ale_fixers.json = ['jq']
let g:ale_fixers.lua = ['luafmt']
let g:ale_fixers.markdown = ['mdl', 'pandoc', 'write-good']
let g:ale_markdown_mdl_options = '--rule ~MD029 --rule ~MD005'
let g:ale_markdown_writegood_options = '--no-passive'

let g:ale_linters = get(g:, 'ale_linters', {})
let g:ale_linters.python = ['pylsp', 'mypy', 'ruff']
let g:ale_linters.markdown = ['markdownlint']
let g:ale_virtualtext_prefix = ' -> '
let g:ale_virtualtext_cursor = 'current'

let g:ale_linters = get(g:, 'ale_linters', {})
let g:ale_linters.python = ['mypy', 'ruff']

" Closetag
let g:closetag_filenames='*.html,*.htm,*.xml,*.php'

" GitGutter
if executable('git')
	set updatetime=1000
end

" git-messenger
let g:git_messenger_always_into_popup = v:true
let g:git_messenger_close_on_cursor_moved = v:false
let g:git_messenger_date_format = '%F %H:%M:%S'
let g:git_messenger_include_diff = 'current'
let g:git_messenger_max_popup_height = 20

" Goyo
let g:goyo_width = '90%'
let g:goyo_height = '90%'
function! s:goyo_enter() abort
	if executable('tmux') && strlen($TMUX)
		silent !tmux set status off
	endif
	set noshowcmd
endfunction

function! s:goyo_leave() abort
	if executable('tmux') && strlen($TMUX)
		silent !tmux set status on
	endif
	set showcmd
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" Markdown
let g:markdown_mapping_switch_status = '<space>,'

" mucomplete
set completeopt=menuone
set completeopt+=noinsert
set belloff+=ctrlg
set shortmess+=c
let s:text_chain = ['uspl', 'dict', 'path', 'omni']
let g:mucomplete#chains = {
			\ 'default': {
			\              'default': ['keyn', 'omni', 'path', 'uspl', 'defs'],
			\              '.*[Ss]tring.*': ['uspl'],
			\              '.*[Cc]omment.*': ['uspl', 'keyn', 'defs'],
			\            },
			\ 'fish': ['omni', 'file', 'incl'],
			\ 'markdown': s:text_chain,
			\ 'text': s:text_chain,
			\ 'vim': ['omni', 'path', 'cmd', 'keyn'],
			\ }
let g:mucomplete#spel#max = 10
let g:mucomplete#enable_auto_at_startup = 0

" netrw/vim-vinegar
let g:netrw_dirhistmax = 0 " history is not needed
let g:netrw_liststyle = 3  " tree style listing

" Rooter
let g:rooter_silent_chdir = 1

" SimplyFold
let g:SimpylFold_docstring_preview = 1

" Tagbar
nnoremap <silent> <F8> :TagbarToggle<CR>
nnoremap <silent> TT :TagbarToggle<CR>
let g:tagbar_position = 'topleft vertical'
let g:tagbar_zoomwidth = 0
let g:tagbar_autofocus = 1
let g:tagbar_sort = 0
let g:tagbar_compact = 1
let g:tagbar_indent = 1
let g:tagbar_show_data_type = 1
let g:tagbar_show_visibility = 1
let g:tagbar_show_tag_linenumbers = 1
let g:tagbar_show_tag_count = 1
let g:tagbar_autoshowtag = 1

" Treesitter
if has('nvim')
	lua <<EOF
	require('nvim-treesitter.configs').setup {
		ensure_installed = {
			"c",
			"cmake",
			"cpp",
			"css",
			"dockerfile",
			"fish",
			"go",
			"html",
			"json",
			"json5",
			"latex",
			"lua",
			"python",
			"rust",
			"toml",
			"typescript",
			"vim",
		},
		auto_install = true,
		highlight = {
			enable = true,
			disable = {
				"git", -- the included runtime files are more than sufficient
				"gitattributes",
				"gitcommit",
				"gitconfig",
				"gitignore",
				"gitrebase",
				"gitsendmail",
			},
		},
		indent = {
			enable = true,
		},
	}
EOF
endif

" }}}

" {{{ Whitespace Options

set shiftwidth=4
set softtabstop=4
set tabstop=4

" show wrapped lines
let &showbreak = '→  '

" keep indent same when wrapping
set breakindent

set list
set listchars=eol:¬,tab:\|\ ,nbsp:~,trail:·,extends:»,precedes:«
" }}}

" {{{ Display Options

set number     " line numbers
syntax on      " syntax highlighting

set showcmd    " show incomplete commands

set nowrap     " don't wrap lines
set linebreak  " don't break in the middle of a word

set wildmenu   " better tab-completion

" to check line lengths
set colorcolumn=+0

" A single cursor is enough
set nocursorline nocursorcolumn


" colorscheme
silent! set termguicolors
" }}}

" {{{ Navigation options

" split navigations
set splitright
set splitbelow

" navigate splits with <Ctrl-hjkl>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" j and k by lines on screen, as with modern editors
nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k

" scrolling
set scrolloff=4
set sidescrolloff=8
set sidescroll=1

" folding options
set foldmethod=marker
set foldlevelstart=99
set foldopen+=all
set foldclose=all

" wraps h and l like modern editors
set whichwrap+=h,l,<,>,[,]

" let % bounce between angle brackets as well
set matchpairs+=<:>

" Mappings for work
nnoremap <silent> ]b        /^.\{-}[:?]\s*$<CR>$
nnoremap <silent> [b        ?^.\{-}[:?]\s*$<CR>$
nnoremap <silent> <leader>b /^.\{-}[:?]\s*$<CR>$
" }}}

" {{{ Search options
set incsearch  " go to results as you type
set ignorecase " ignore case in search . . .
set smartcase  " unless I type a capital letter

if has('patch-8.0.1206')
	augroup vimrc-insearch-highlight
		autocmd!
		autocmd CmdLineEnter [/\?] call search#toggle_hls(1)
		autocmd CmdLineLeave [/\?] call search#toggle_hls(0)
	augroup END
endif

" automatically make searches "more magic" aka sane
nnoremap / /\v
vnoremap / /\v
nnoremap ? ?\v
vnoremap ? ?\v

if executable('rg')
	set grepprg=rg\ --vimgrep\ $*
elseif executable('grep')
	set grepprg=grep\ -Rn\ --\ $*
else
	" fall back to vimgrep, which is slower but functional
	set grepprg=internal
endif
command! -nargs=+ -bar Grep silent! grep! <args> | cwindow | redraw!
" }}}

" {{{ Editing Options

" virtual edit in visual mode
set virtualedit+=block

" swap file
let s:swap = $HOME . '/vimswap'
if !isdirectory(s:swap)
	call mkdir(s:swap, 'p')
endif
set swapfile
set directory-=.
execute 'set directory^=' . s:swap

" formatting options, mostly dealing with comment characters
set formatoptions-=o " no autoinsert of comment char on o or O
set formatoptions-=r " no autoinsert of comment char on <CR> in insert mode
set formatoptions+=j " remove comment leader when Joining lines
set formatoptions+=1 " if possible, break line before one letter word
set formatoptions+=c " auto-format comments
set formatoptions-=t " but don't auto-format text

" automagically load changes from disk
set autoread

" set a default and good enough omnifunc
set omnifunc=ale#completion#OmniFunc
" }}}

" {{{ Key and Command Mappings

" cd to :head of :path
nnoremap <Leader>cd :cd %:p:h<CR>

" remove trailing whitespace
nnoremap <Leader>w :call whitespace#TrimWhitespace()<CR>

" go to next misspelled word and suggest
nnoremap <Leader>s ]Sz=
nnoremap <Leader>S [Sz=

" I don't like Ex mode
nnoremap Q <nop>

" compliment to ZZ and ZQ
nnoremap ZA :w<CR>

" using mouse
set mouse=a

" color options
command! RandomColorScheme call color#RandomColorScheme()
command! NextColorScheme call color#NextColorScheme()
command! PreviousColorScheme call color#PreviousColorScheme()

" comes in handy
command! -bar -range OK <line1>,<line2>lua require('insert').InsertAtLineEnd("OK")
nnoremap <Leader>o :OK<CR>
vnoremap <Leader>o :OK<CR>

" editing prose
command! -bang Prose call prose#initialize()

" Show location of file
command! -bang Location call location#show()
" }}}

" {{{ Misc Options

" make backspace work the way it dos in most editors
set backspace=indent,eol,start

" UTF-8
set encoding=utf-8

" store a lot of history
set history=1000

" Unix line endings
set fileformat=unix

" no sound, just flash the screen
set visualbell

" Make spell not take over entire screen
set spellsuggest=15

" enable modelines
set modeline modelines=5 nomodelineexpr

if &diff
	" Makes diff easier to read
	" https://vi.stackexchange.com/a/626
	highlight! link DiffText MatchParen

	" easier to quit both at once in diff mode
	command! Q qall

	" disable linting
	silent! ALEDisable

	set nonumber signcolumn=no foldopen-=all
endif

" some settings that can't be done from a ftplugin (or it would be onerous to
" do so)
augroup vimrc
	autocmd!
	autocmd BufNewFile,BufRead *.js,*.css,*.htm,*.html,*.php
	  \ setlocal
	  \   autoindent
	  \   fileformat=unix
	  \   foldmethod=indent
	  \   noexpandtab
	  \   shiftwidth=2
	  \   softtabstop=2
	  \   tabstop=2
	autocmd BufNewFile,BufRead !status* cd %:p:h | setlocal spell
	autocmd InsertLeave *.py,*.pyw
	  \ if pumvisible() == 0 && winnr('$') > 1 | pclose | endif
augroup END
" }}}

" {{{ Add this location to the runtimepath
let &runtimepath .= ',' . expand('<sfile>:p:h')
" }}}
